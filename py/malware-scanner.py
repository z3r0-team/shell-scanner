#!/usr/bin/env python3

import sys
import os
import fnmatch
import re
import stat
import json
import subprocess
import time
import hashlib
import math
import threading

VERSION = "0.3 (Python 3 Port)"

# Variabel global untuk menyimpan signature
JAVASCRIPT_SIGNATURES = []
PHP_SIGNATURES = []
HASH_SIGNATURES = []
HASHTABLE = {}

def checksum(fname):
    """Menghitung MD5 checksum dari sebuah file."""
    hash_md5 = hashlib.md5()
    try:
        with open(fname, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()
    except IOError:
        return "" # Mengembalikan string kosong jika file tidak dapat dibaca

def is_text(filename):
    """
    Memeriksa apakah sebuah file kemungkinan besar adalah file teks.
    File dianggap biner jika mengandung null byte atau lebih dari 30% karakternya bukan teks.
    """
    try:
        with open(filename, 'rb') as f:
            s = f.read(512)
    except IOError:
        return False # Tidak dapat membaca file

    if not s:
        # File kosong dianggap sebagai teks
        return True
    if b'\0' in s:
        # File dengan null byte kemungkinan besar biner
        return False

    # Membuat himpunan byte yang dianggap teks untuk pencarian cepat
    text_characters = bytes(range(32, 127)) + b'\n\r\t\b'
    
    # Hitung jumlah byte non-teks
    non_text_count = sum(1 for byte in s if byte not in text_characters)

    # Jika lebih dari 30% adalah non-teks, anggap sebagai biner
    if len(s) > 0 and (non_text_count / len(s)) > 0.30:
        return False
        
    return True

class bcolors:
    """Kelas untuk warna terminal."""
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def pmsg(msg, code='info'):
    """Mencetak pesan dengan kode warna."""
    color_map = {
        'info': bcolors.OKGREEN,
        'warning': bcolors.WARNING,
        'error': bcolors.FAIL
    }
    colorcode = color_map.get(code, bcolors.OKGREEN)
    print(f"{bcolors.OKBLUE}{bcolors.UNDERLINE}>>{bcolors.ENDC} {colorcode}{msg}{bcolors.ENDC}")

def progress_bar(current, total, msg):
    """Menampilkan progress bar di terminal."""
    if total == 0:
        i = 100
    else:
        i = (current / total) * 100
    
    i = min(100, max(0, i)) # Memastikan persentase antara 0 dan 100

    # Menggunakan f-string dan print dengan end='' untuk meniru sys.stdout.write
    print(f"\r{bcolors.OKBLUE}{bcolors.UNDERLINE}>>{bcolors.ENDC} {bcolors.OKGREEN}{msg} ({i:.0f}%)", end='', flush=True)

    if i >= 100:
        print() # Pindah ke baris baru setelah selesai

def file_scan(web_path):
    """Fungsi utama untuk memindai file di path yang diberikan."""
    total_infected = 0
    total_insecure = 0
    infected_files = []

    # Pertama, hitung total file untuk progress bar
    file_list = []
    for root, _, filenames in os.walk(web_path):
        for filename in filenames:
            file_list.append(os.path.join(root, filename))
    total_files = len(file_list)

    pmsg(f"Target: {web_path} ({total_files} files)")

    for i, current_file in enumerate(file_list):
        progress_bar(i + 1, total_files, "Scanning... please wait...")
        
        # Gunakan path absolut untuk konsistensi
        abs_current_file = os.path.abspath(current_file)

        infected = False
        malware = ''

        # 1. Pindai berdasarkan hash checksum
        current_checksum = checksum(abs_current_file)
        if current_checksum in HASHTABLE:
            infected = True
            malware = str(HASHTABLE[current_checksum])

        if infected:
            details = {'filename': abs_current_file, 'malware': malware}
            if details not in infected_files:
                infected_files.append(details)
            continue # Lanjut ke file berikutnya jika sudah terinfeksi

        # 2. Pindai berdasarkan signature jika file adalah teks
        if is_text(abs_current_file):
            try:
                with open(abs_current_file, 'r', encoding='utf-8', errors='ignore') as f:
                    file_data = f.read()
            except IOError:
                continue

            # Pindai signature JavaScript (tanpa threading)
            if not infected:
                for signature_definition in JAVASCRIPT_SIGNATURES:
                    if infected: break
                    for signature in signature_definition["Database_Signatures"]:
                        if infected: break
                        for signature_expression in signature["Malware_Signatures"]:
                            try:
                                if re.search(signature_expression, file_data, re.IGNORECASE):
                                    infected = True
                                    malware = signature["Malware_Name"]
                                    break
                            except re.error:
                                pmsg(f"ERROR in JS signature regex: {signature_expression}", "error")
            
            if infected:
                details = {'filename': abs_current_file, 'malware': malware}
                if details not in infected_files:
                    infected_files.append(details)
                continue

            # Pindai signature PHP (menggunakan threading)
            threads = {}
            class ScanFileThread(threading.Thread):
                def __init__(self, file_data, signatures):
                    super().__init__()
                    self.infected = False
                    self.stopped = False
                    self.file_data = file_data
                    self.signatures = signatures
                    self.malware = ''

                def run(self):
                    for signature in self.signatures:
                        if self.stopped: break
                        for signature_expression in signature["Malware_Signatures"]:
                            if self.stopped: break
                            try:
                                if re.search(signature_expression, self.file_data, re.IGNORECASE):
                                    self.infected = True
                                    self.malware = signature["Malware_Name"]
                                    self.stopped = True # Hentikan setelah ditemukan
                                    break
                            except re.error:
                                self.stopped = True
                                break

                def stop(self):
                    self.stopped = True
            
            for signature_definition in PHP_SIGNATURES:
                thread = ScanFileThread(file_data, signature_definition["Database_Signatures"])
                threads[signature_definition["Database_Name"]] = thread
                thread.start()

            for thread in threads.values():
                thread.join()
                if thread.infected:
                    details = {'filename': abs_current_file, 'malware': thread.malware}
                    if details not in infected_files:
                        infected_files.append(details)
                    break 
    
    # Hitung total infeksi setelah semua pemindaian selesai
    total_infected = len(infected_files)

    progress_bar(1, 1, "Scanning completed.")
    for details in infected_files:
        pmsg(f"Infected file ({details['malware']}) found: {details['filename']}", "warning")

    # BARU: Simpan hasil ke file malwared.txt jika ada infeksi
    if infected_files:
        output_filename = 'malwared.txt'
        pmsg(f"Saving list of infected files to {output_filename}...")
        try:
            with open(output_filename, 'w', encoding='utf-8') as f:
                for item in infected_files:
                    f.write(f"[{item['malware']}] {item['filename']}\n")
            pmsg(f"Results saved successfully to {output_filename}", "info")
        except IOError as e:
            pmsg(f"Could not write to {output_filename}: {e}", "error")


    # Memindai izin file/folder yang tidak aman
    pmsg("Scanning for insecure permissions...")
    for root, dirnames, _ in os.walk(web_path):
        for item_name in dirnames:
            item_path = os.path.join(root, item_name)
            try:
                mode = os.stat(item_path).st_mode
                if mode & stat.S_IWOTH:
                    pmsg(f"Insecure permission ({oct(mode)[-4:]}) found on: {item_path}", "warning")
                    total_insecure += 1
            except FileNotFoundError:
                continue

    colorcode = "info"
    if total_infected > 0 or total_insecure > 0:
        colorcode = "error"
    pmsg(f"Scan completed. Found {total_infected} infected file(s). Found {total_insecure} insecure permission(s).", colorcode)

def load_signatures(signatures_path):
    """Memuat semua file signature dari direktori yang ditentukan."""
    signature_files = []
    for root, _, filenames in os.walk(signatures_path):
        for filename in fnmatch.filter(filenames, '*.json'):
            signature_files.append(os.path.join(root, filename))
    
    total_databases = len(signature_files)
    if total_databases == 0:
        pmsg(f"No signature files found in {signatures_path}", "warning")
        return

    loaded_databases = 0
    for file_path in signature_files:
        try:
            with open(file_path, 'r') as f:
                signature = json.load(f)
            
            if "/php/" in file_path.replace("\\", "/"):
                PHP_SIGNATURES.append(signature)
            elif "/js/" in file_path.replace("\\", "/"):
                JAVASCRIPT_SIGNATURES.append(signature)
            elif "/checksum/" in file_path.replace("\\", "/"):
                HASH_SIGNATURES.append(signature)

            loaded_databases += 1
            progress_bar(loaded_databases, total_databases, "Loading signature database...")
        except (IOError, json.JSONDecodeError) as e:
            pmsg(f"Unable to load signature file: {os.path.basename(file_path)} ({e})", "error")

    progress_bar(1, 1, "Database loaded.")
    pmsg("Building hashtable...")
    for signature in HASH_SIGNATURES:
        for signature_hash in signature.get("Database_Hash", []):
            HASHTABLE[signature_hash["Malware_Hash"]] = signature_hash["Malware_Name"]
    pmsg(f"Loaded {len(HASHTABLE)} malware hash signatures.")

if __name__ == "__main__":
    if len(sys.argv) == 2:
        pmsg(f"Web Malware Scanner v{VERSION}")

        signatures_path = "./signatures/"
        if os.path.isdir(signatures_path):
            load_signatures(signatures_path)
        else:
            pmsg(f"Unable to find signatures database folder ({signatures_path}). Please check path.", "error")
            sys.exit(1)

        web_path = sys.argv[1]
        if os.path.isdir(web_path):
            file_scan(web_path)
        else:
            pmsg(f"Unable to find web installation folder ({web_path}). Please check path.", "error")
            sys.exit(1)
    else:
        pmsg(f"Usage: {sys.argv[0]} /path/to/web/installations")
